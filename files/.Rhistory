),
output = "gt"
)
# Ajustar el modelo lineal mixto con variables estandarizadas
glm_gaussian2_standardized <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz+total_elements ~
pca_scores + precipitation + (1 | season),
data = region2_combined,
control = lmerControl(optimizer = "bobyqa")  # Cambiar el algoritmo de optimización a "bobyqa"
)
#modelo con variables transformadas
glm_gaussian2_transformed <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + low_freq_hz_inv +total_elements  ~
pca_scores + precipitation_log +(1 | season),
data = region2_transformed,
control = lmerControl(optimizer = "bobyqa")
)
glm_gaussian1_standardized <- lmer(
low_freq_hz + high_freq_hz+ delta_time_s + peak_freq_hz+total_elements ~
pca_scores + elevation+ precipitation + (1 | season),
data = region1_combined,
control = lmerControl(optimizer = "bobyqa")
)
#modelo con variables transformadas
glm_gaussian1_transformed <- lmer(
low_freq_hz_inv + high_freq_hz_sq + delta_time_s_log + peak_freq_hz+total_elements ~
pca_scores + elevation_bc + precipitation_log + (1 | season),
data = region1_transformed,
control = lmerControl(optimizer = "bobyqa")
)
modelsummary(
models ,
fmt = fmt_significant(2),
statistic = c("{std.error}","{p.value}"),
stars = TRUE,
coef_rename = c(
"temperature" = "Air temperature (C)",
"elevation" = "Elevation (amsl)",
"precipitation" = "Precipitation (mm)"
),  output = "gt", gof_map = c("aic", "bic")
)
tab %>%
# column labels
tab_spanner(label = 'Region 1', columns = 1:5) %>%
tab_spanner(label = 'Region 2', columns = 6:9)
library(car)
# Función para verificar los supuestos de normalidad de los residuos
check_normality <- function(model) {
# Obtener los residuos del modelo
residuals <- residuals(model)
# QQ plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Prueba de Shapiro-Wilk
shapiro_test <- shapiro.test(residuals)
print(shapiro_test)
}
View(region2_combined)
View(region2_combined)
region1_combined$season <- as.factor(region1_combined$season)
# ANCOVA para low_freq_hz
ancova_low_freq_hz <- aov(low_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
# ANCOVA para high_freq_hz
ancova_high_freq_hz <- aov(high_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
# ANCOVA para low_freq_hz
ancova_low_freq_hz <- aov(low_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_low_freq_hz)
# ANCOVA para high_freq_hz
ancova_high_freq_hz <- aov(high_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_high_freq_hz)
# ANCOVA para delta_time_s
ancova_delta_time_s <- aov(delta_time_s ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_delta_time_s)
# ANCOVA para peak_freq_hz
ancova_peak_freq_hz <- aov(peak_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_peak_freq_hz)
# ANCOVA para total_elements
ancova_total_elements <- aov(total_elements ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_total_elements)
# Función para verificar los supuestos de normalidad de los residuos
check_normality <- function(model) {
# Obtener los residuos del modelo
residuals <- residuals(model)
# QQ plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Prueba de Shapiro-Wilk
shapiro_test <- shapiro.test(residuals)
print(shapiro_test)
}
# Aplicar a cada modelo ANCOVA
ancova_models <- list(
ancova_low_freq_hz = ancova_low_freq_hz,
ancova_high_freq_hz = ancova_high_freq_hz,
ancova_delta_time_s = ancova_delta_time_s,
ancova_peak_freq_hz = ancova_peak_freq_hz,
ancova_total_elements = ancova_total_elements
)
# Verificar normalidad de los residuos para cada modelo
lapply(ancova_models, check_normality)
gc()
# Verificar normalidad de los residuos para cada modelo
lapply(ancova_models, check_normality)
# Función para verificar los supuestos de normalidad de los residuos
check_normality <- function(model) {
# Obtener los residuos del modelo
residuals <- residuals(model)
# Establecer márgenes más pequeños para evitar el error "figure margins too large"
par(mar = c(5, 4, 4, 2) + 0.1)
# QQ plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Prueba de Shapiro-Wilk
shapiro_test <- shapiro.test(residuals)
print(shapiro_test)
}
# Aplicar a cada modelo ANCOVA
ancova_models <- list(
ancova_low_freq_hz = ancova_low_freq_hz,
ancova_high_freq_hz = ancova_high_freq_hz,
ancova_delta_time_s = ancova_delta_time_s,
ancova_peak_freq_hz = ancova_peak_freq_hz,
ancova_total_elements = ancova_total_elements
)
# Verificar normalidad de los residuos para cada modelo
lapply(ancova_models, check_normality)
# Función para verificar los supuestos de normalidad de los residuos
check_normality <- function(model) {
# Obtener los residuos del modelo
residuals <- residuals(model)
# Crear un dataframe con los residuos
df_resid <- data.frame(Residuals = residuals)
# Gráfico QQ con ggplot2
ggplot(df_resid, aes(sample = Residuals)) +
geom_qq() +
geom_qq_line() +
labs(title = "Q-Q Plot de los Residuos")
# Prueba de Shapiro-Wilk
shapiro_test <- shapiro.test(residuals)
print(shapiro_test)
}
# Aplicar a cada modelo ANCOVA
ancova_models <- list(
ancova_low_freq_hz = ancova_low_freq_hz,
ancova_high_freq_hz = ancova_high_freq_hz,
ancova_delta_time_s = ancova_delta_time_s,
ancova_peak_freq_hz = ancova_peak_freq_hz,
ancova_total_elements = ancova_total_elements
)
# Verificar normalidad de los residuos para cada modelo
lapply(ancova_models, check_normality)
region1$season <- as.factor(region1$season)
# ANCOVA para low_freq_hz
ancova_low_freq_hz <- aov(low_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
View(region1)
View(region1_selected)
region1_selected$season <- as.factor(region1_selected$season)
# ANCOVA para low_freq_hz
ancova_low_freq_hz <- aov(low_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_low_freq_hz)
# ANCOVA para high_freq_hz
ancova_high_freq_hz <- aov(high_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_high_freq_hz)
# ANCOVA para delta_time_s
ancova_delta_time_s <- aov(delta_time_s ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_delta_time_s)
# ANCOVA para peak_freq_hz
ancova_peak_freq_hz <- aov(peak_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_peak_freq_hz)
# ANCOVA para total_elements
ancova_total_elements <- aov(total_elements ~ season + pca_scores + elevation + precipitation, data = region1_combined)
summary(ancova_total_elements)
# Aplicar a cada modelo ANCOVA
ancova_models <- list(
ancova_low_freq_hz = ancova_low_freq_hz,
ancova_high_freq_hz = ancova_high_freq_hz,
ancova_delta_time_s = ancova_delta_time_s,
ancova_peak_freq_hz = ancova_peak_freq_hz,
ancova_total_elements = ancova_total_elements
)
# ANCOVA para low_freq_hz
ancova_low_freq_hz <- aov(low_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_selected)
summary(ancova_low_freq_hz)
# ANCOVA para high_freq_hz
ancova_high_freq_hz <- aov(high_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_selected)
summary(ancova_high_freq_hz)
# ANCOVA para delta_time_s
ancova_delta_time_s <- aov(delta_time_s ~ season + pca_scores + elevation + precipitation, data = region1_selected)
summary(ancova_delta_time_s)
# ANCOVA para peak_freq_hz
ancova_peak_freq_hz <- aov(peak_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_selected)
summary(ancova_peak_freq_hz)s
# ANCOVA para total_elements
ancova_total_elements <- aov(total_elements ~ season + pca_scores + elevation + precipitation, data = region1_selected)
summary(ancova_total_elements)
# Función para verificar los supuestos de normalidad de los residuos
check_normality <- function(model) {
# Obtener los residuos del modelo
residuals <- residuals(model)
# Crear un dataframe con los residuos
df_resid <- data.frame(Residuals = residuals)
# Gráfico QQ con ggplot2
ggplot(df_resid, aes(sample = Residuals)) +
geom_qq() +
geom_qq_line() +
labs(title = "Q-Q Plot de los Residuos")
# Prueba de Shapiro-Wilk
shapiro_test <- shapiro.test(residuals)
print(shapiro_test)
}
# Aplicar a cada modelo ANCOVA
ancova_models <- list(
ancova_low_freq_hz = ancova_low_freq_hz,
ancova_high_freq_hz = ancova_high_freq_hz,
ancova_delta_time_s = ancova_delta_time_s,
ancova_peak_freq_hz = ancova_peak_freq_hz,
ancova_total_elements = ancova_total_elements
)
lapply(ancova_models, check_normality)
region1_transformed$season <- as.factor(region1_transformed$season)
# ANCOVA para low_freq_hz
ancova_low_freq_hz <- aov(low_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_transformed)
# ANCOVA para high_freq_hz
ancova_high_freq_hz <- aov(high_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_transformed)
# ANCOVA para delta_time_s
ancova_delta_time_s <- aov(delta_time_s ~ season + pca_scores + elevation + precipitation, data = region1_transformed)
# ANCOVA para peak_freq_hz
ancova_peak_freq_hz <- aov(peak_freq_hz ~ season + pca_scores + elevation + precipitation, data = region1_transformed)
# ANCOVA para total_elements
ancova_total_elements <- aov(total_elements ~ season + pca_scores + elevation + precipitation, data = region1_transformed)
# Función para verificar los supuestos de normalidad de los residuos
check_normality <- function(model) {
# Obtener los residuos del modelo
residuals <- residuals(model)
# Crear un dataframe con los residuos
df_resid <- data.frame(Residuals = residuals)
# Gráfico QQ con ggplot2
ggplot(df_resid, aes(sample = Residuals)) +
geom_qq() +
geom_qq_line() +
labs(title = "Q-Q Plot de los Residuos")
# Prueba de Shapiro-Wilk
shapiro_test <- shapiro.test(residuals)
print(shapiro_test)
}
# Aplicar a cada modelo ANCOVA
ancova_models <- list(
ancova_low_freq_hz = ancova_low_freq_hz,
ancova_high_freq_hz = ancova_high_freq_hz,
ancova_delta_time_s = ancova_delta_time_s,
ancova_peak_freq_hz = ancova_peak_freq_hz,
ancova_total_elements = ancova_total_elements
)
lapply(ancova_models, check_normality)
glmm_interactions_model <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + total_elements ~
season * pca_scores + season * elevation + season * precipitation +
(1 | season),
data = region1_standardized,
control = lmerControl(optimizer = "bobyqa")
)
glmm_interactions_model <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + total_elements ~
season * pca_scores + season * elevation + season * precipitation +
(1 | season),
data = region1_combined,
control = lmerControl(optimizer = "bobyqa")
)
vif_values <- vif(glmm_interactions_model)
print(vif_values)
glmm_interactions_model <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + total_elements ~
season * pca_scores + season * elevation + season * precipitation +
(1 | season),
data = region1_transformed,
control = lmerControl(optimizer = "bobyqa")
)
vif_values <- vif(glmm_interactions_model)
print(vif_values)
glmm_interactions_model_simplified <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + total_elements ~
season + pca_scores + elevation + precipitation +
season:pca_scores +
(1 | season),
data = region1_combined,
control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5, tol = 1e-6))
)
vif_values <- vif(glmm_interactions_model)
print(vif_values)
glmm_interactions_model_simplified <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + total_elements ~
season + pca_scores + elevation + precipitation +
season:pca_scores +
(1 | season),
data = region1_transformed,
control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5, tol = 1e-6))
)
vif_values <- vif(glmm_interactions_model)
print(vif_values)
# Resumen del modelo
summary(glmm_interactions_model)
glmm_models_interactions1 <- list(
glmm_low_freq_hz = lmer(low_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_high_freq_hz = lmer(high_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_delta_time_s = lmer(delta_time_s ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_peak_freq_hz = lmer(peak_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_total_elements = lmer(total_elements ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa"))
)
# Evaluar la normalidad de los residuos para cada modelo
check_normality <- function(model) {
shapiro.test(residuals(model))
}
normality_results <- lapply(glmm_models_interactions, check_normality)
normality_results <- lapply(glmm_models_interactions1, check_normality)
# Imprimir los resultados de los tests de normalidad
normality_results
# Función para realizar validación cruzada
cross_validate_model <- function(model_formula, data) {
train_control <- trainControl(method = "cv", number = 10)
train(model_formula, data = data, method = "lmer", trControl = train_control)
}
# Aplicar validación cruzada a cada modelo
cross_validation_results <- lapply(glmm_models_interactions1, function(model) {
formula <- formula(model)
cross_validate_model(formula, region1_combined)
})
library(caret)
install.packages('caret')
library(caret)
# Función para realizar validación cruzada
cross_validate_model <- function(model_formula, data) {
train_control <- trainControl(method = "cv", number = 10)
train(model_formula, data = data, method = "lmer", trControl = train_control)
}
# Aplicar validación cruzada a cada modelo
cross_validation_results <- lapply(glmm_models_interactions1, function(model) {
formula <- formula(model)
cross_validate_model(formula, region1_combined)
})
# Resultados de la validación cruzada
cross_validation_results
# Repetir para las otras variables de respuesta
glmm_gamma_models <- list(
low_freq_hz = glmer(
low_freq_hz ~ season * pca_scores + season * elevation + season * precipitation +
(1 | season),
family = Gamma(link = "log"),
data = region1_combined,
control = glmerControl(optimizer = "bobyqa")
),
high_freq_hz = glmer(
high_freq_hz ~ season * pca_scores + season * elevation + season * precipitation +
(1 | season),
family = Gamma(link = "log"),
data = region1_combined,
control = glmerControl(optimizer = "bobyqa")
),
delta_time_s = glmer(
delta_time_s ~ season * pca_scores + season * elevation + season * precipitation +
(1 | season),
family = Gamma(link = "log"),
data = region1_combined,
control = glmerControl(optimizer = "bobyqa")
),
peak_freq_hz = glmer(
peak_freq_hz ~ season * pca_scores + season * elevation + season * precipitation +
(1 | season),
family = Gamma(link = "log"),
data = region1_combined,
control = glmerControl(optimizer = "bobyqa")
),
total_elements = glmer(
total_elements ~ season * pca_scores + season * elevation + season * precipitation +
(1 | season),
family = Gamma(link = "log"),
data = region1_combined,
control = glmerControl(optimizer = "bobyqa")
)
)
# Resúmenes de los modelos
lapply(glmm_gamma_models, summary)
glmm_models_interactions1 <- list(
glmm_low_freq_hz = lmer(low_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_high_freq_hz = lmer(high_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_delta_time_s = lmer(delta_time_s ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_peak_freq_hz = lmer(peak_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_total_elements = lmer(total_elements ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa"))
)
# Función para realizar validación cruzada
cross_validate_model <- function(model_formula, data) {
train_control <- trainControl(method = "cv", number = 10)
train(model_formula, data = data, method = "lmer", trControl = train_control)
}
# Aplicar validación cruzada a cada modelo
cross_validation_results <- lapply(glmm_models_interactions, function(model) {
formula <- formula(model)
cross_validate_model(formula, region1_combined)
})
# Aplicar validación cruzada a cada modelo
cross_validation_results <- lapply(glmm_models_interactions1, function(model) {
formula <- formula(model)
cross_validate_model(formula, region1_combined)
})
Q
# Función para realizar validación cruzada
cross_validate_model <- function(formula, data) {
train_control <- trainControl(method = "cv", number = 10)
model <- train(formula, data = data, method = "glmer", trControl = train_control,
control = glmerControl(optimizer = "bobyqa"))
return(model)
}
# Aplicar la validación cruzada a cada modelo
cv_results <- lapply(formulas, function(formula) cross_validate_model(formula, region1_combined_clean))
# Aplicar la validación cruzada a cada modelo
cv_results <- lapply(glm_models_interactions1, function(formula) cross_validate_model(formula, region1_combined_clean))
glmm_models_interactions1 <- list(
glmm_low_freq_hz = lmer(low_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_high_freq_hz = lmer(high_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_delta_time_s = lmer(delta_time_s ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_peak_freq_hz = lmer(peak_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_total_elements = lmer(total_elements ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region1_combined, control = lmerControl(optimizer = "bobyqa"))
)
# Aplicar la validación cruzada a cada modelo
cv_results <- lapply(glm_models_interactions1, function(formula) cross_validate_model(formula, region1_combined_clean))
View(glmm_models_interactions1)
# Aplicar la validación cruzada a cada modelo
cv_results <- lapply(glmm_models_interactions1, function(formula) cross_validate_model(formula, region1_combined_clean))
modelsummary(
glmm_models_interactions1 ,
fmt = fmt_significant(2),
statistic = c("{std.error}","{p.value}"),
stars = TRUE,
coef_rename = c(
"temperature" = "Air temperature (C)",
"elevation" = "Elevation (amsl)",
"precipitation" = "Precipitation (mm)"
),  output = "gt", gof_map = c("aic", "bic")
)
glmm_models_interactions2 <- list(
glmm_low_freq_hz = lmer(low_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region2_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_high_freq_hz = lmer(high_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region2_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_delta_time_s = lmer(delta_time_s ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region2_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_peak_freq_hz = lmer(peak_freq_hz ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region2_combined, control = lmerControl(optimizer = "bobyqa")),
glmm_total_elements = lmer(total_elements ~ season * pca_scores + season * elevation + season * precipitation + (1 | season), data = region2_combined, control = lmerControl(optimizer = "bobyqa"))
)
modelsummary(
glmm_models_interactions2 ,
fmt = fmt_significant(2),
statistic = c("{std.error}","{p.value}"),
stars = TRUE,
coef_rename = c(
"temperature" = "Air temperature (C)",
"elevation" = "Elevation (amsl)",
"precipitation" = "Precipitation (mm)"
),  output = "gt", gof_map = c("aic", "bic")
)
glm_gaussian1_standardized <- lmer(
low_freq_hz + high_freq_hz+ delta_time_s + peak_freq_hz+total_elements ~
pca_scores + elevation+ precipitation + (1 | season),
data = region1_combined,
control = lmerControl(optimizer = "bobyqa")
)
# Resumen del modelo
summary(glm_gaussian1_standardized)
#modelo con variables transformadas
glm_gaussian2_transformed <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + low_freq_hz_inv +total_elements  ~
pca_scores + precipitation_log +(1 | season),
data = region2_transformed,
control = lmerControl(optimizer = "bobyqa")
)
summary(glm_gaussian2_transformed)
region2_transformed <- region2_selected %>%
mutate(
precipitation_log = transform(precipitation, method = "log+1"),
low_freq_hz_inv = transform(low_freq_hz, method = "1/x"),
delta_time_s_log = transform(delta_time_s, method = "log+1")) %>%
mutate(across(c(precipitation_log, high_freq_hz, low_freq_hz_inv, elevation, delta_time_s_log), scale))
#modelo con variables transformadas
glm_gaussian2_transformed <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + low_freq_hz_inv +total_elements  ~
pca_scores + precipitation_log +(1 | season),
data = region2_transformed,
control = lmerControl(optimizer = "bobyqa")
)
View(region2_standardized)
glm_gaussian2_transformed <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + low_freq_hz_inv +total_elements  ~
pca_scores + precipitation_log +(1 | season),
data = region2_transformed,
control = lmerControl(optimizer = "bobyqa")
)
region2_transformed <- region2_selected %>%
mutate(
precipitation_log = transform(precipitation, method = "log+1"),
low_freq_hz_inv = transform(low_freq_hz, method = "1/x"),
delta_time_s_log = transform(delta_time_s, method = "log+1")) %>%
mutate(across(c(precipitation_log, high_freq_hz, low_freq_hz_inv, elevation, delta_time_s_log), scale))
glm_gaussian2_transformed <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + low_freq_hz_inv +total_elements  ~
pca_scores + precipitation_log +(1 | season),
data = region2_transformed,
control = lmerControl(optimizer = "bobyqa")
)
View(region2_transformed)
glm_gaussian2_transformed <- lmer(
low_freq_hz + high_freq_hz + delta_time_s + peak_freq_hz + low_freq_hz_inv +total_elements  ~
air_temperature + precipitation_log +(1 | season),
data = region2_transformed,
control = lmerControl(optimizer = "bobyqa")
)
summary(glm_gaussian2_transformed)
