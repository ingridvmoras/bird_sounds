dataset<-merge(dataset,months) %>% rename(month=mes)
View(dataset)
write_csv(dataset, "dataset.csv")
View(dataset)
View(singings)
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(singings)
singings <- singings %>%
filter(View == 'Spectrogram 1') %>%
group_by(ID) %>% mutate(canto=as.character(canto)) %>%
mutate(`total elementos` = as.character(if_else(is.na(`total elementos`), "0", as.character(`total elementos`)))
) %>%  select(4:which(names(.) == "ID")) %>%   group_by(`tipo de nota`, ID) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop")
View(singings)
View(singings)
View(singings)
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(singings)
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
months<-read_csv('months.csv')
singings <- singings %>%
filter(View == 'Spectrogram 1') %>%
group_by(ID) %>%
mutate(canto = as.character(canto),
`total elementos` = as.character(if_else(is.na(`total elementos`), "0", as.character(`total elementos`)))
) %>%
select(4:which(names(.) == "ID")) %>%
group_by(`tipo de nota`, ID) %>%
mutate(across(where(is.numeric), mean, na.rm = TRUE)) %>%
ungroup()
View(singings)
singings <- singings %>%
filter(View == 'Spectrogram 1') %>%
group_by(ID) %>%
mutate(canto = as.character(canto),
`total elementos` = as.character(if_else(is.na(`total elementos`), "0", as.character(`total elementos`)))
) %>%
select(4:which(names(.) == "ID")) %>%
group_by(`tipo de nota`, ID) %>%
mutate(across(where(is.numeric), mean, na.rm = TRUE))
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
singings <- singings %>%
filter(View == 'Spectrogram 1') %>%
group_by(ID) %>%
mutate(canto = as.character(canto),
`total elementos` = as.character(if_else(is.na(`total elementos`), "0", as.character(`total elementos`)))
) %>%
select(4:which(names(.) == "ID")) %>%
group_by(`tipo de nota`, ID) %>%
mutate(across(where(is.numeric), mean, na.rm = TRUE))
View(singings)
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
months<-read_csv('months.csv')
singings <- singings %>%
filter(View == 'Spectrogram 1') %>%
group_by(ID) %>% mutate(canto=as.character(canto)) %>%
mutate(`total elementos` = as.character(if_else(is.na(`total elementos`), "0", as.character(`total elementos`)))
) %>%  select(4:which(names(.) == "ID")) %>%   group_by(`tipo de nota`, ID) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop")
data<- merge(climate, singings)
dataset<-read_delim("final_data.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
months<-read_csv('months.csv')
dataset<-merge(dataset,months) %>% rename(month=mes)
write_csv(dataset, "dataset.csv")
View(dataset)
# Iterar sobre cada fila de datos para descargar y procesar los datos climáticos
# Definir las variables a descargar
variables <- c('2m_temperature', 'maximum_2m_temperature_since_previous_post_processing', 'minimum_2m_temperature_since_previous_post_processing',
'total_precipitation')
# Iterar sobre cada fila de datos para descargar y procesar los datos climáticos
# Definir las variables a descargar
variables <- c('2m_temperature', 'maximum_2m_temperature_since_previous_post_processing', 'minimum_2m_temperature_since_previous_post_processing',
'total_precipitation')
foreach(i = 1:nrow(datos)) %do% {
# Obtener los valores de la fila actual
nlat <- datos[i, "nlat"]
slat <- datos[i, "slat"]
wlon <- datos[i, "wlon"]
elon <- datos[i, "elon"]
anio <- as.numeric(datos[i, "anio"])
region <- datos[i, "region"]
fecha <- datos[i, "fecha"]
tx <- as.character(datos[i, "ID"])
# Configurar la solicitud de descarga
request <- list(
"dataset_short_name" = "reanalysis-era5-single-levels",
"product_type" = "reanalysis",
"variable" = variables,
"year" = anio,
"month" =  month(as.Date(fecha)),
"day" = day(as.Date(fecha)),
"time" = c(paste0("0",0:9,":00"),paste0(10:23,":00")),
"area" = paste(nlat, wlon, slat, elon, sep = "/"),  #(N, W, S, E) nlat wlon slat elon
"format" = "netcdf",
"target" = paste0("era5_", region, "_", anio, "_", tx, ".nc")
)
# Realizar la solicitud y descargar los datos
file <- tryCatch(
wf_request(
user = "308579",   # ID de usuario (para autenticación)
request = request,  # la solicitud
transfer = TRUE,     # descargar el archivo
path = "era5data"       # almacenar los datos en el directorio de trabajo actual
),
error = function(e) {
message("Error descargando datos para la fila ", i, ": ", conditionMessage(e))
return(NULL)
}
)
}
fecha <- pull(datos[i, "fecha"])
foreach(i = 1:nrow(datos)) %do% {
# Obtener los valores de la fila actual
nlat <- datos[i, "nlat"]
slat <- datos[i, "slat"]
wlon <- datos[i, "wlon"]
elon <- datos[i, "elon"]
anio <- as.numeric(datos[i, "anio"])
region <- datos[i, "region"]
fecha <- pull(datos[i, "fecha"])
tx <- as.character(datos[i, "ID"])
# Configurar la solicitud de descarga
request <- list(
"dataset_short_name" = "reanalysis-era5-single-levels",
"product_type" = "reanalysis",
"variable" = variables,
"year" = anio,
"month" =  month(as.Date(fecha)),
"day" = day(as.Date(fecha)),
"time" = c(paste0("0",0:9,":00"),paste0(10:23,":00")),
"area" = paste(nlat, wlon, slat, elon, sep = "/"),  #(N, W, S, E) nlat wlon slat elon
"format" = "netcdf",
"target" = paste0("era5_", region, "_", anio, "_", tx, ".nc")
)
# Realizar la solicitud y descargar los datos
file <- tryCatch(
wf_request(
user = "308579",   # ID de usuario (para autenticación)
request = request,  # la solicitud
transfer = TRUE,     # descargar el archivo
path = "era5data"       # almacenar los datos en el directorio de trabajo actual
),
error = function(e) {
message("Error descargando datos para la fila ", i, ": ", conditionMessage(e))
return(NULL)
}
)
}
nc_open("era5data/era5_Caldas_2024_ML616703718.nc")
temp_mn2t <- ncvar_get(nc, "mn2t")
temp_mx2t <- ncvar_get(nc, "mx2t")
# Inicializar un data frame para almacenar los resultados
resultados <- data.frame(ID = character(), fecha = character(), temperatura = numeric(), precipitacion = numeric())
# Listar todos los archivos .nc en la carpeta especificada
nc_files <- list.files(path = "./GitHub/bird_sounds/files/era5data", pattern = "\\.nc$", full.names = TRUE)
# Inicializar un data frame para almacenar los resultados
resultados <- data.frame(ID = character(), fecha = character(), temperatura = numeric(), precipitacion = numeric())
for (file in nc_files) {
# Verificar si se obtuvo el archivo correctamente
if (!is.null(file)) {
# Abrir el archivo NetCDF
nc <- nc_open(file)
# Extraer las variables de interés
temp_kelvin <- ncvar_get(nc, "t2m")  # Temperatura en Kelvin
precipitacion <- ncvar_get(nc, "tp")  # Precipitación
temp_mn2t <- ncvar_get(nc, "mn2t")
temp_mx2t <- ncvar_get(nc, "mx2t")
# Calcular la temperatura y precipitación promedio diaria
temp_mn2t_promedio <- apply(temp_mn2t - 273.15, c(1, 2), mean)
temp__mn2t_promedio_diaria <- mean(temp_mn2t_promedio)
temp_mx2t_promedio <- apply(temp_mx2t - 273.15, c(1, 2), mean)
temp__mx2t_promedio_diaria <- mean(temp_mx2t_promedio)
temp_promedio <- apply(temp_kelvin - 273.15, c(1, 2), mean)
temp_promedio_diaria <- mean(temp_promedio)
precipitacion_total <- apply(precipitacion, c(1, 2), sum) * 1000  # Convertir a mm
precipitacion_diaria <- mean(precipitacion_total)
# Cerrar el archivo NetCDF
nc_close(nc)
# Obtener información del archivo para ID y fecha
filename <- basename(file)
info <- strsplit(filename, "_")
if (length(info[[1]]) >= 3) {
ID <- gsub(".nc", "", info[[1]][4])  # Suponiendo que el ID está en la cuarta posición del nombre del archivo
fecha <- substr(info[[1]][3], 1, 4)  # Extrayendo el año de la tercera posición del nombre del archivo
} else {
warning(paste("No se pudo extraer información de ID y fecha para el archivo:", filename))
next  # Saltar a la siguiente iteración del bucle
}
# Agregar los resultados al data frame de resultados
resultados <- bind_rows(resultados, data.frame(
ID = ID,
fecha = fecha,
temperatura = temp_promedio_diaria,
precipitacion = precipitacion_diaria,
temperatura_max= temp__mx2t_promedio_diaria,
temperatura_min=temp_mn2t_promedio_diaria
))
}
}
# Listar todos los archivos .nc en la carpeta especificada
nc_files <- list.files(path = "./GitHub/bird_sounds/files/era5data", pattern = "\\.nc$", full.names = TRUE)
# Listar todos los archivos .nc en la carpeta especificada
nc_files <- list.files(path = "Home/GitHub/bird_sounds/files/era5data", pattern = "\\.nc$", full.names = TRUE)
setwd("C:/Users/isabe/OneDrive/Documentos/GitHub/bird_sounds/files/era5data")
# Listar todos los archivos .nc en la carpeta especificada
nc_files <- list.files(path = C:/Users/isabe/OneDrive/Documentos/GitHub/bird_sounds/files/era5data", pattern = "\\.nc$", full.names = TRUE)
# Listar todos los archivos .nc en la carpeta especificada
nc_files <- list.files(path = "C:\\Users\\isabe\\OneDrive\\Documentos\\GitHub\\bird_sounds\\files\\era5data", pattern = "\\.nc$", full.names = TRUE)
# Inicializar un data frame para almacenar los resultados
resultados <- data.frame(ID = character(), year = character(), temperature = numeric(), precipitation = numeric(), max_temp=numeric(),min_temp=numeric() )
for (file in nc_files) {
# Verificar si se obtuvo el archivo correctamente
if (!is.null(file)) {
# Abrir el archivo NetCDF
nc <- nc_open(file)
# Extraer las variables de interés
temp_kelvin <- ncvar_get(nc, "t2m")  # Temperatura en Kelvin
precipitacion <- ncvar_get(nc, "tp")  # Precipitación
temp_mn2t <- ncvar_get(nc, "mn2t")
temp_mx2t <- ncvar_get(nc, "mx2t")
# Calcular la temperatura y precipitación promedio diaria
temp_mn2t_promedio <- apply(temp_mn2t - 273.15, c(1, 2), mean)
temp__mn2t_promedio_diaria <- mean(temp_mn2t_promedio)
temp_mx2t_promedio <- apply(temp_mx2t - 273.15, c(1, 2), mean)
temp__mx2t_promedio_diaria <- mean(temp_mx2t_promedio)
temp_promedio <- apply(temp_kelvin - 273.15, c(1, 2), mean)
temp_promedio_diaria <- mean(temp_promedio)
precipitacion_total <- apply(precipitacion, c(1, 2), sum) * 1000  # Convertir a mm
precipitacion_diaria <- mean(precipitacion_total)
# Cerrar el archivo NetCDF
nc_close(nc)
# Obtener información del archivo para ID y fecha
filename <- basename(file)
info <- strsplit(filename, "_")
if (length(info[[1]]) >= 3) {
ID <- gsub(".nc", "", info[[1]][4])  # Suponiendo que el ID está en la cuarta posición del nombre del archivo
fecha <- substr(info[[1]][3], 1, 4)  # Extrayendo el año de la tercera posición del nombre del archivo
} else {
warning(paste("No se pudo extraer información de ID y fecha para el archivo:", filename))
next  # Saltar a la siguiente iteración del bucle
}
# Agregar los resultados al data frame de resultados
resultados <- bind_rows(resultados, data.frame(
ID = ID,
year = fecha,
temperature = temp_promedio_diaria,
precipitation = precipitacion_diaria,
max_temp= temp__mx2t_promedio_diaria,
min_temp=temp_mn2t_promedio_diaria
))
}
}
# Inicializar un data frame para almacenar los resultados
resultados <- data.frame(ID = character(), year = character(), temperature = numeric(), precipitation = numeric(), max_temp=numeric(),min_temp=numeric() )
for (file in nc_files) {
# Verificar si se obtuvo el archivo correctamente
if (!is.null(file)) {
# Abrir el archivo NetCDF
nc <- nc_open(file)
# Extraer las variables de interés
temp_kelvin <- ncvar_get(nc, "t2m")  # Temperatura en Kelvin
precipitacion <- ncvar_get(nc, "tp")  # Precipitación
temp_mn2t <- ncvar_get(nc, "mn2t")
temp_mx2t <- ncvar_get(nc, "mx2t")
# Calcular la temperatura y precipitación promedio diaria
temp_mn2t_promedio <- apply(temp_mn2t - 273.15, c(1, 2), mean)
temp_mn2t_promedio_diaria <- mean(temp_mn2t_promedio)
temp_mx2t_promedio <- apply(temp_mx2t - 273.15, c(1, 2), mean)
temp_mx2t_promedio_diaria <- mean(temp_mx2t_promedio)
temp_promedio <- apply(temp_kelvin - 273.15, c(1, 2), mean)
temp_promedio_diaria <- mean(temp_promedio)
precipitacion_total <- apply(precipitacion, c(1, 2), sum) * 1000  # Convertir a mm
precipitacion_diaria <- mean(precipitacion_total)
# Cerrar el archivo NetCDF
nc_close(nc)
# Obtener información del archivo para ID y fecha
filename <- basename(file)
info <- strsplit(filename, "_")
if (length(info[[1]]) >= 3) {
ID <- gsub(".nc", "", info[[1]][4])  # Suponiendo que el ID está en la cuarta posición del nombre del archivo
fecha <- substr(info[[1]][3], 1, 4)  # Extrayendo el año de la tercera posición del nombre del archivo
} else {
warning(paste("No se pudo extraer información de ID y fecha para el archivo:", filename))
next  # Saltar a la siguiente iteración del bucle
}
# Agregar los resultados al data frame de resultados
resultados <- bind_rows(resultados, data.frame(
ID = ID,
year = fecha,
temperature = temp_promedio_diaria,
precipitation = precipitacion_diaria,
max_temp= temp_mx2t_promedio_diaria,
min_temp=temp_mn2t_promedio_diaria
))
}
}
View(resultados)
climate<-read_csv('climate_variables.csv')
resultados <- merge(resultados, altitudes,meses by = "ID")
resultados <- merge(resultados, altitudes,meses, by = "ID")
# Inicializar un data frame para almacenar los resultados de altitud
altitudes <- data.frame(ID = character(), altitud = numeric())
# Iterar sobre cada fila de datos para obtener los datos de altitud
foreach(i = 1:nrow(datos)) %do% {
# Obtener los valores de la fila actual
nlat <- datos[i, "nlat"]
slat <- datos[i, "slat"]
wlon <- datos[i, "wlon"]
elon <- datos[i, "elon"]
tx <- as.character(datos[i, "ID"])
# Obtener datos de elevación utilizando Google Maps Elevation API
elevation_data <- tryCatch(
google_elevation(df_locations = data.frame(lat = as.numeric(nlat), lon = as.numeric(wlon)), key = api_key),
error = function(e) {
message("Error obteniendo datos de elevación para la fila ", i, ": ", conditionMessage(e))
return(NULL)
}
)
# Verificar si se obtuvieron datos de elevación
if (!is.null(elevation_data)) {
# Extraer la altitud del resultado
altitud <- elevation_data$results$elevation
# Agregar la altitud al dataframe de altitudes
altitudes <- bind_rows(altitudes, data.frame(ID = tx, altitud = altitud))
} else {
# Si no se obtienen datos de altitud, asignar NA
altitudes <- bind_rows(altitudes, data.frame(ID = tx, altitud = NA))
}
}
# Setear la clave de la API de Google Maps Elevation
api_key <- "AIzaSyDTdfNAwyp4-5R-mgfhSOCwIF_dbvETlAw"
# Iterar sobre cada fila de datos para obtener los datos de altitud
foreach(i = 1:nrow(datos)) %do% {
# Obtener los valores de la fila actual
nlat <- datos[i, "nlat"]
slat <- datos[i, "slat"]
wlon <- datos[i, "wlon"]
elon <- datos[i, "elon"]
tx <- as.character(datos[i, "ID"])
# Obtener datos de elevación utilizando Google Maps Elevation API
elevation_data <- tryCatch(
google_elevation(df_locations = data.frame(lat = as.numeric(nlat), lon = as.numeric(wlon)), key = api_key),
error = function(e) {
message("Error obteniendo datos de elevación para la fila ", i, ": ", conditionMessage(e))
return(NULL)
}
)
# Verificar si se obtuvieron datos de elevación
if (!is.null(elevation_data)) {
# Extraer la altitud del resultado
altitud <- elevation_data$results$elevation
# Agregar la altitud al dataframe de altitudes
altitudes <- bind_rows(altitudes, data.frame(ID = tx, altitud = altitud))
} else {
# Si no se obtienen datos de altitud, asignar NA
altitudes <- bind_rows(altitudes, data.frame(ID = tx, altitud = NA))
}
}
View(altitudes)
# Inicializar un data frame para almacenar los resultados de altitud
altitudes <- data.frame(ID = character(), altitud = numeric())
# Iterar sobre cada fila de datos para obtener los datos de altitud
foreach(i = 1:nrow(datos)) %do% {
# Obtener los valores de la fila actual
nlat <- datos[i, "nlat"]
slat <- datos[i, "slat"]
wlon <- datos[i, "wlon"]
elon <- datos[i, "elon"]
tx <- as.character(datos[i, "ID"])
# Obtener datos de elevación utilizando Google Maps Elevation API
elevation_data <- tryCatch(
google_elevation(df_locations = data.frame(lat = as.numeric(nlat), lon = as.numeric(wlon)), key = api_key),
error = function(e) {
message("Error obteniendo datos de elevación para la fila ", i, ": ", conditionMessage(e))
return(NULL)
}
)
# Verificar si se obtuvieron datos de elevación
if (!is.null(elevation_data)) {
# Extraer la altitud del resultado
altitud <- elevation_data$results$elevation
# Agregar la altitud al dataframe de altitudes
altitudes <- bind_rows(altitudes, data.frame(ID = tx, altitud = altitud))
} else {
# Si no se obtienen datos de altitud, asignar NA
altitudes <- bind_rows(altitudes, data.frame(ID = tx, altitud = NA))
}
}
resultados <- merge(resultados, altitudes,meses, by = "ID")
resultados <- merge(resultados, altitudes,meses)
resultados <- merge(resultados, altitudes, meses)
resultados <- merge(resultados, meses)
resultados <- merge(resultados,altitudes)
View(resultados)
meses <- data.frame(ID = character(), month = numeric())
foreach(i = 1:nrow(datos)) %do% {
# Obtener los valores de la fila actual
fecha<- pull(datos[i, "fecha"])
mes<-  month(as.Date(fecha))
tx <- as.character(datos[i, "ID"])
meses <- bind_rows(meses, data.frame(ID = tx, month = mes))
}
View(resultados)
# Listar todos los archivos .nc en la carpeta especificada
nc_files <- list.files(path = "C:\\Users\\isabe\\OneDrive\\Documentos\\GitHub\\bird_sounds\\files\\era5data", pattern = "\\.nc$", full.names = TRUE)
# Inicializar un data frame para almacenar los resultados
resultados <- data.frame(ID = character(), year = character(), temperature = numeric(), precipitation = numeric(), max_temp=numeric(),min_temp=numeric() )
for (file in nc_files) {
# Verificar si se obtuvo el archivo correctamente
if (!is.null(file)) {
# Abrir el archivo NetCDF
nc <- nc_open(file)
# Extraer las variables de interés
temp_kelvin <- ncvar_get(nc, "t2m")  # Temperatura en Kelvin
precipitacion <- ncvar_get(nc, "tp")  # Precipitación
temp_mn2t <- ncvar_get(nc, "mn2t")
temp_mx2t <- ncvar_get(nc, "mx2t")
# Calcular la temperatura y precipitación promedio diaria
temp_mn2t_promedio <- apply(temp_mn2t - 273.15, c(1, 2), mean)
temp_mn2t_promedio_diaria <- mean(temp_mn2t_promedio)
temp_mx2t_promedio <- apply(temp_mx2t - 273.15, c(1, 2), mean)
temp_mx2t_promedio_diaria <- mean(temp_mx2t_promedio)
temp_promedio <- apply(temp_kelvin - 273.15, c(1, 2), mean)
temp_promedio_diaria <- mean(temp_promedio)
precipitacion_total <- apply(precipitacion, c(1, 2), sum) * 1000  # Convertir a mm
precipitacion_diaria <- mean(precipitacion_total)
# Cerrar el archivo NetCDF
nc_close(nc)
# Obtener información del archivo para ID y fecha
filename <- basename(file)
info <- strsplit(filename, "_")
if (length(info[[1]]) >= 3) {
ID <- gsub(".nc", "", info[[1]][4])  # Suponiendo que el ID está en la cuarta posición del nombre del archivo
fecha <- substr(info[[1]][3], 1, 4)  # Extrayendo el año de la tercera posición del nombre del archivo
} else {
warning(paste("No se pudo extraer información de ID y fecha para el archivo:", filename))
next  # Saltar a la siguiente iteración del bucle
}
# Agregar los resultados al data frame de resultados
resultados <- bind_rows(resultados, data.frame(
ID = ID,
year = fecha,
temperature = temp_promedio_diaria,
precipitation = precipitacion_diaria,
max_temp= temp_mx2t_promedio_diaria,
min_temp=temp_mn2t_promedio_diaria
))
}
}
meses <- data.frame(ID = character(), month = numeric())
foreach(i = 1:nrow(datos)) %do% {
# Obtener los valores de la fila actual
fecha<- pull(datos[i, "fecha"])
mes<-  month(as.Date(fecha))
tx <- as.character(datos[i, "ID"])
meses <- bind_rows(meses, data.frame(ID = tx, month = mes))
}
resultados <- merge(resultados, meses)
resultados <- merge(resultados,altitudes)
View(resultados)
write_csv(resultados, "climate_variables.csv")
climate<-read_csv('climate_variables.csv')
View(climate)
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/isabe/OneDrive/Documentos/GitHub/bird_sounds/files")
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(singings)
View(singings)
singings <- singings %>%
filter(View == 'Spectrogram 1') %>%
group_by(ID) %>% mutate(canto=as.character(canto)) %>%
mutate(`total elementos` = as.character(if_else(is.na(`total elementos`), "0", as.character(`total elementos`)))
) %>%  select(4:which(names(.) == "ID")) %>%  mutate(nueva_columna = case_when(
tipo_de_nota == "cad" ~ `Delta Time (s)`,
TRUE ~ NA_real_  # Mantén NA para las filas donde tipo_de_nota no es "cad"
))
singings <- singings %>%
filter(View == 'Spectrogram 1') %>%
group_by(ID) %>% mutate(canto=as.character(canto)) %>%
mutate(`total elementos` = as.character(if_else(is.na(`total elementos`), "0", as.character(`total elementos`)))
) %>%  select(4:which(names(.) == "ID")) %>%  mutate(nueva_columna = case_when(`tipo de nota`== "cad" ~ `Delta Time (s)`,
TRUE ~ NA_real_  # Mantén NA para las filas donde tipo_de_nota no es "cad"
))
singings<-read_delim("birdsongs_variables.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
cad <- singings %>%
filter(tipo_de_nota == "cad") %>%
select(`Delta Time (s)`, canto, ID)
cad <- singings %>%
filter(tipo de nota == "cad") %>%
cad <- singings %>%  filter(View == 'Spectrogram 1') %>%
filter(`tipo de nota` == "cad") %>%
select(`Delta Time (s)`, canto, ID)
View(cad)
cad <- singings %>%  filter(View == 'Spectrogram 1') %>%
filter(`tipo de nota` == "cad") %>%
select(`Delta Time (s)`, canto, ID) %>% sort(decreasing = ID)
cad <- singings %>%  filter(View == 'Spectrogram 1') %>%
filter(`tipo de nota` == "cad") %>%
select(`Delta Time (s)`, canto, ID) %>% rename(cad=`Delta Time (s) ) %>%  sort(decreasing = ID )
gc()
gc()
