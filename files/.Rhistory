print(plot_2)
pdf(paste0("C:\\Users\\isabe\\OneDrive\\Documentos\\GitHub\\bird_sounds\\results\\figures",Sys.Date(), "_region1_exploratory.pdf"), width = 9.5, height = 6.25)
plot(plot_1)
plot(plot_2)
plot(plot_3)
# Termina el dispositivo de gráficos PDF
dev.off()
datos_seca <- region1 %>%
filter(season == "dry_season") %>%
select(temperature, min_temp, max_temp)
datos_humedo <- region1 %>%
filter(season == "wet_season") %>%
select(temperature, min_temp, max_temp)
library(FactoMineR)
pca_seca <- PCA(X = datos_seca, scale.unit = TRUE, graph = TRUE)
fviz_pca_var(pca_seca, alpha.var="contrib")+
theme_minimal()
plot(pca_seca, choix="ind")
pca_humedo <- PCA(X = datos_humedo, scale.unit = TRUE, graph = TRUE)
fviz_screeplot(pca_humedo, ncp=3)
fviz_pca_var(pca_humedo, alpha.var="contrib")+
theme_minimal()
summary(pca_seca)
summary(pca_humedo)
temp_diaria_seca <- pca_seca$ind$coord[, 1]
temp_diaria_humedo <- pca_humedo$ind$coord[, 1]
air_temperature <- tibble(
Componente = c(temp_diaria_seca, temp_diaria_humedo),
season = c(rep("dry_season", length(temp_diaria_seca)), rep("wet_season", length(temp_diaria_humedo)))
)
plot_3<- ggplot(air_temperature , aes(x = season, y = Componente, fill = season)) +
geom_boxplot() +
labs(x = "Season", y = "Principal Component (Air temperature)") +   scale_fill_brewer(palette = "YlOrRd")+
theme_minimal()
# Mostrar el boxplot
print(plot_3)
correlation_matrix <- cor.test(air_temperature$Componente, region1$elevation, method = "spearman")
View(air_temperature)
View(air_temperature)
View(region1)
correlation_matrix <- cor.test(air_temperature$Componente, region1$elevation, method = "spearman")
View(correlation_matrix)
# Verificar la correlación entre temperatura del aire y precipitación
correlation <- correlation_matrix$estimate
correlation
correlation_matrix2 <- cor.test(air_temperature$Componente, region1$precipitation, method = "spearman")
correlation2 <- correlation_matrix2$estimate
correlation2 <- correlation_matrix2$estimate
correlation2
View(summary_stats11)
View(summary1)
View(summary11)
summarise(subset(region1, by= c('low_freq_hz','high_freq_hz','peak_freq_hz','delta_time_s','cad')))
summary(subset(region1, by= c('low_freq_hz','high_freq_hz','peak_freq_hz','delta_time_s','cad')))
dry_season_stats<-summarise(filter(region1, region1$season=='dry_season'))
dry_season_stats<-summary(filter(region1, region1$season=='dry_season'))
print(dry_season_stats)
#Estadisticos de tendencia central por temporada
selected_vars <- c('low_freq_hz','high_freq_hz','peak_freq_hz','delta_time_s','cad')
summary_stats <- region1 %>%
select(all_of(selected_vars)) %>%
summarise(
media = mean(.),
valor_maximo = max(.),
valor_minimo = min(.),
varianza = var(.)
)
#Estadisticos de tendencia central por temporada
elected_vars <- c('low_freq_hz','high_freq_hz','peak_freq_hz','delta_time_s','cad')
# Convertir las variables seleccionadas a numéricas si es necesario
region1 <- mutate_at(region1, selected_vars, as.numeric)
# Calcula las estadísticas descriptivas utilizando dplyr
summary_stats <- region1 %>%
summarise(
media = mean(low_freq_hz, na.rm = TRUE),
valor_maximo = max(low_freq_hz, na.rm = TRUE),
valor_minimo = min(low_freq_hz, na.rm = TRUE),
varianza = var(low_freq_hz, na.rm = TRUE)
)
View(summary_stats)
# Calcula las estadísticas descriptivas utilizando dplyr
summary_stats <- region1 %>%
summarise(across(all_of(selected_vars),
list(media = mean,
valor_maximo = max,
valor_minimo = min,
varianza = var),
na.rm = TRUE))
# Calcula las estadísticas descriptivas utilizando dplyr
summary_stats <- region1 %>%
summarise(across(all_of(selected_vars),
.fns = list(
media = \(x) mean(x, na.rm = TRUE),
valor_maximo = \(x) max(x, na.rm = TRUE),
valor_minimo = \(x) min(x, na.rm = TRUE),
varianza = \(x) var(x, na.rm = TRUE))))
View(summary_stats)
summary_stats<- summary_stats %>% pivot_longer(names_to = statistic,values_to = value)
summary_stats<- summary_stats %>% pivot_longer(names_to = 'statistic' ,values_to = 'value')
summary_stats<- summary_stats %>% pivot_longer(names_to = 'statistic' ,values_to = 'value')
summary_stats<- summary_stats %>% pivot_longer(cols=everything() = 'statistic' ,values_to = 'value')
summary_stats<- summary_stats %>% pivot_longer(everything() = 'statistic' ,values_to = 'value')
summary_stats<- summary_stats %>% pivot_longer(everything(), names_to = 'statistic' ,values_to = 'value')
View(summary_stats)
summary(region1)
# Calcula las estadísticas descriptivas utilizando dplyr
summary_stats <- region1 %>% filter(season=='dry_season')
# Calcula las estadísticas descriptivas utilizando dplyr
summary_stats <- region1 %>% filter(season=='dry_season')
# Calcula las estadísticas descriptivas utilizando dplyr
summary_statd <- region1 %>% filter(season=='dry_season') %>%
summarise(across(all_of(selected_vars),
.fns = list(
media = \(x) mean(x, na.rm = TRUE),
valor_maximo = \(x) max(x, na.rm = TRUE),
valor_minimo = \(x) min(x, na.rm = TRUE),
varianza = \(x) var(x, na.rm = TRUE))))
View(summary_statd)
summary_statd<- summary_statd %>% pivot_longer(everything(), names_to = 'statistic' ,values_to = 'value')
View(summary_statd)
# Calcula las estadísticas descriptivas utilizando dplyr
summary_statd <- region1 %>% filter(season=='dry_season') %>%
summarise(across(all_of(selected_vars),
.fns = list(
media = \(x) mean(x, na.rm = TRUE),
valor_maximo = \(x) max(x, na.rm = TRUE),
valor_minimo = \(x) min(x, na.rm = TRUE),
varianza = \(x) var(x, na.rm = TRUE))))
View(summary_statd)
summary_statd<- summary_statd %>% pivot_longer(everything(), names_to = 'statistic' ,values_to = 'value')
summary(region1 %>% filter(season=='dry_season'))
# Calcula las estadísticas descriptivas utilizando dplyr
summary_statd <- summary(region1 %>% filter(season=='dry_season'))
# Calcula las estadísticas descriptivas utilizando dplyr
summary_statd <- summary(region1 %>% filter(season=='dry_season'))
summary_statd <- summary(region1 %>% filter(season=='wet_season'))
# Calcula las estadísticas descriptivas utilizando dplyr
summary_statd <- summary(region1 %>% filter(season=='dry_season'))
summary_statw <- summary(region1 %>% filter(season=='wet_season'))
#Estadisticos de tendencia central por temporada
selected_vars <- c('low_freq_hz','high_freq_hz','peak_freq_hz','delta_time_s','cad')
region1 <- mutate_at(region1, selected_vars, as.numeric)
# Calcula las estadísticas descriptivas
summary_statd <- summary(region1 %>% filter(season=='dry_season'))
summary_statw <- summary(region1 %>% filter(season=='wet_season'))
dry<- region1 %>% filter(season=='dry_season')
# Calcula las estadísticas descriptivas
dry<- region1 %>% filter(season=='dry_season')
wet<- region1 %>% filter(season=='wet_season')
summary_statd <- summary(dry)
summary_statw <- summary(wet)
View(wet)
# Calcula las estadísticas descriptivas
dry<- region1 %>% filter(season=='dry_season') %>% mutate_at(selected_vars, ~(scale(.) %>% as.vector))
View(dry)
wet<- region1 %>% filter(season=='wet_season') %>% mutate_at(selected_vars, ~(scale(.) %>% as.vector))
#Z-estandarización
dry<- dry %>% mutate_at(selected_vars, ~(scale(.) %>% as.vector))
wet<- wet %>% mutate_at(selected_, ~(scale(.) %>% as.vector))
# Calcula las estadísticas descriptivas
dry<- region1 %>% filter(season=='dry_season')
wet<- region1 %>% filter(season=='wet_season')
summary_statd <- summary(dry)
summary_statw <- summary(wet)
#Z-estandarización
dry<- dry %>% mutate_at(selected_vars, ~(scale(.) %>% as.vector))
wet<- wet %>% mutate_at(selected_, ~(scale(.) %>% as.vector))
wet<- wet %>% mutate_at(selected_vars, ~(scale(.) %>% as.vector))
View(region1)
shapiro.test(region1$low_freq_hz)
shapiro.test(region1$high_freq_hz)
shapiro.test(region1$peak_freq_hz)
shapiro.test(region1$delta_time_s)
shapiro.test(region1$cad)
shapiro.test(region1$precipitation)
shapiro.test(air_temperature$Componente)
ad.test(air_temperature$Componente)
library(nortest)
install.packages('nortest')
install.packages('nortest')
library(nortest)
ad.test(air_temperature$Componente)
ad.test(region1$low_freq_hz)
ad.test(region1$elevation)
ad.test(region1$low_freq_hz)
ad.test(region1$high_freq_hz)
ad.test(region1$delta_time_s)
ad.test(region1$cad)
ad.test(region1$peak_freq_hz)
# Calcula las estadísticas descriptivas
dry <- region1 %>%
filter(season == 'dry_season') %>%
mutate(pca_scores = air_temperature$Componentes)
View(air_temperature)
# Calcula las estadísticas descriptivas
dry <- region1 %>%
filter(season == 'dry_season') %>%
mutate(pca_scores = air_temperature$Componente)
View(air_temperature)
# Calcula las estadísticas descriptivas
dry <- region1 %>%
filter(season == 'dry_season') %>%
mutate(pca_scores = filter(air_temperature$season=='dry_seanos'))
# Calcula las estadísticas descriptivas
dry <- region1 %>%
filter(season == 'dry_season') %>%
mutate(pca_scores = filter(air_temperature$season=='dry_season'))
dry_air<- filter(air_temperature$season=='dry_season')
dry_air<- filter(air_temperature,air_temperature$season=='dry_season')
dry <- region1 %>%
filter(season == 'dry_season') %>%
mutate(pca_scores = dry_air$Componente )
wet_air<- filter(air_temperature,air_temperature$season=='wet_season')
wet_air <- region1 %>%
filter(season == 'wet_season') %>%
mutate(pca_scores = wet_air$Componente )
wet_air<- filter(air_temperature,air_temperature$season=='wet_season')
wet <- region1 %>%
filter(season == 'wet_season') %>%
mutate(pca_scores = wet_air$Componente )
summary_statd <- summary(dry)
summary_statw <- summary(wet)
glm_gamma <- glm(selected_vars ~ air_temperature + elevation + precipitation , data = dry, family = Gamma(link = "log"))
glm_gamma <- glm(selected_vars ~ pca_scores + elevation + precipitation , data = dry, family = Gamma(link = "log"))
glm_gamma <- glm(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation , data = dry, family = Gamma(link = "log"))
library(broom)
tidy(glm_gamma)
glance(glm_gamma)
glm_gamma <- glm(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season) , data = dry, family = Gamma(link = "log"))
dry$season <- factor(dry$season)
wet$season <- factor(wet$season)
glm_gammadry <- glm(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season) , data = dry, family = Gamma(link = "log"))
glm_gammadry <- lmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season) , data = dry, family = Gamma(link = "log"))
library(lme4)
glm_gammadry <- lmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season) , data = dry, family = Gamma(link = "log"))
)
glm_gammadry <- lmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season),
data = dry, family= Gamma())
dry <- mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))
region1 <- mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))
View(region1)
region1 <- mutate_at(region1, selected_vars, as.numeric)
View(region1)
#Estadisticos de tendencia central por temporada
selected_vars <- c('low_freq_hz','high_freq_hz','peak_freq_hz','delta_time_s','cad','quarter')
region1 <- mutate_at(region1, selected_vars, as.numeric)
region1 <- mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))
region1 <- region1 %>%mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))
dry$season <- factor(dry$season)
wet$season <- factor(wet$season)
glm_gammadry <- glmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season),
data = dry, family= Gamma())
region1 <- region1 %>%mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))
region1$season <- factor(region1$season)
region1$season <- factor(region1$season)
glm_gammadry <- glmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season),
data = region1, family= Gamma())
summary_statd <- summary(dry)
summary_statw <- summary(wet)
print(summary_statd)
summary_statw <- summary(wet)
print(summary_statd)
source("~/GitHub/bird_sounds/code/data_exploration.R")
print(summary_statw)
region1 <- region1 %>%mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))  %>%
mutate(pca_scores = air_temperature$Componente )
region1$season <- factor(region1$season)
glm_gammadry <- glmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season),
data = region1, family= Gamma())
region1 <- region1 %>%mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))  %>%
mutate(pca_scores = air_temperature$Componente ) %>% drop_na()
glm_gammadry <- glmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season),
data = region1, family= Gamma())
View(region1)
climate <- climate_variables <- read_delim("climate_variables.csv",
delim = ";", escape_double = FALSE, col_types = cols(date = col_date(format = "%d/%m/%Y")),
trim_ws = TRUE)
dataset <- read_csv("final_dataset.csv")
dataset <- dataset %>% drop_na()
summary(climate)
summary(dataset)
dataset$date <- as.Date(dataset$date, format = "%Y-%m-%d")
dataset$month <- lubridate::month(dataset$date)
dataset$year<- as.numeric(dataset$year)
region1<- dataset %>% filter(!region %in% c("Casanare", "Cesar", "Putumayo"))
region1 <- region1 %>%
mutate(quarter = case_when(
month %in% c(12, 1, 2) ~ 1,
month %in% c(3, 4, 5) ~ 2,
month %in% c(6, 7, 8) ~ 3,
month %in% c(9, 10, 11) ~ 4
))
# Combinar los promedios con el conjunto de datos original
region1 <- region1 %>%
left_join(prom_region1, by = c("quarter", "year")) %>%   left_join(prom_region1, by = c("quarter", "year")) %>%
select(-matches("(.x)$"))
region1<- region1 %>% select(-matches("(.y)$"))
#Estadisticos de tendencia central por temporada
selected_vars <- c('low_freq_hz','high_freq_hz','peak_freq_hz','delta_time_s','cad','quarter')
region1 <- mutate_at(region1, selected_vars, as.numeric)
region1 <- region1 %>% mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))  %>% arrange(season) %>%
mutate(pca_scores = air_temperature$Componente ) %>% drop_na()
View(region1)
View(air_temperature)
air_temperature<-air_temperature %>% arrange(season)
region1 <- region1 %>% mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))  %>% arrange(season) %>%
mutate(pca_scores = air_temperature$Componente ) %>% drop_na()
View(region1)
region1$season <- factor(region1$season)
glm_gammadry <- glmer(low_freq_hz+high_freq_hz+peak_freq_hz+delta_time_s+cad~ pca_scores + elevation + precipitation + (1 | season),
data = region1, family= Gamma())
mixed_model <- glmer(low_freq_hz + high_freq_hz + peak_freq_hz + delta_time_s + cad ~ pca_scores + elevation + precipitation + (1 | season),
data = region1,
family = Gamma(),
control = glmerControl(optimizer = "bobyqa"))
summary(region1)
mixed_model <- glmer(low_freq_hz + high_freq_hz + delta_time_s + cad ~ pca_scores + elevation + precipitation + (1 | season),
data = region1,
family = Gamma())
mixed_model <- glmer(low_freq_hz + high_freq_hz + delta_time_s + cad ~  elevation + precipitation + (1 | season),
data = region1,
family = Gamma())
mixed_model <- glmer(low_freq_hz + high_freq_hz + delta_time_s ~  elevation + precipitation + (1 | season),
data = region1,
family = Gamma())
mixed_model <- glmer( delta_time_s ~  elevation + precipitation + (1 | season),
data = region1,
family = Gamma())
mixed_model <- glmer( delta_time_s ~  elevation + precipitation + (1 | season),
data = region1,
family = gaussian())
mixed_model <- glmer( low_freq_hz+high_freq_hz ~ pca_scores elevation + precipitation + (1 | season),
mixed_model <- glmer( low_freq_hz+high_freq_hz ~ pca_scores +elevation + precipitation + (1 | season),
data = region1,
family = gaussian())
mixed_model <- glmer( low_freq_hz+high_freq_hz+cad ~ pca_scores +elevation + precipitation + (1 | season),
data = region1,
family = gaussian())
mixed_model <- glmer( low_freq_hz+high_freq_hz+cad+delta_time_s ~ pca_scores +elevation + precipitation + (1 | season),
data = region1,
family = gaussian())
mixed_model <- glmer( low_freq_hz+high_freq_hz+cad+delta_time_s+peak_freq_hz ~ pca_scores +elevation + precipitation + (1 | season),
data = region1,
family = gaussian())
glm_gaussian <- glmer( low_freq_hz+high_freq_hz+cad+delta_time_s+peak_freq_hz ~ pca_scores +elevation + precipitation + (1 | season),
data = region1,
family = gaussian())
glm_gaussian <- lmer(low_freq_hz + high_freq_hz + cad + delta_time_s + peak_freq_hz ~ pca_scores + elevation + precipitation + (1 | season),
data = region1)
tidy(glm_gaussian)
glance(glm_gaussian)
summary(lmerMod)
summary(glm_gaussian)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(lubridate)
library(ggplot2)
library(factoextra)
library(broom)
library(lme4)
region1 <- region1 %>% mutate(season = ifelse(quarter %in% c(1, 3), 1, 2))  %>% arrange(season) %>%
mutate(pca_scores = air_temperature$Componente ) %>% drop_na()
region1$season <- factor(region1$season)
glm_gaussian <- lmer(low_freq_hz + high_freq_hz + cad + delta_time_s + peak_freq_hz ~ pca_scores + elevation + precipitation + (1 | season),
data = region1)
summary(glm_gaussian)
View(region2)
region2 <- region2 %>%
mutate(season = case_when(
month %in% c(12, 1, 2,3) ~ 1,
month %in% c(4:11) ~ 2,
))
prom_region2 <- region2 %>%
group_by(season, year) %>%
summarise(
temperature= mean(temperature, na.rm = TRUE),
max_temp= mean(max_temp, na.rm = TRUE),
min_temp = mean(min_temp, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE)
)
# Combinar los promedios con el conjunto de datos original
region2 <- region2 %>%
left_join(prom_region2, by = c("season", "year")) %>%   left_join(prom_region2, by = c("quarter", "year")) %>%
select(-matches("(.x)$"))
# Combinar los promedios con el conjunto de datos original
region2 <- region2 %>%
left_join(prom_region2, by = c("season", "year")) %>%
select(-matches("(.x)$"))
region2<- region2 %>% select(-matches("(.y)$"))
View(region2)
prom_region2 <- region2 %>%
group_by(season, year) %>%
summarise(
temperature= mean(temperature, na.rm = TRUE),
max_temp= mean(max_temp, na.rm = TRUE),
min_temp = mean(min_temp, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE)
)
# Combinar los promedios con el conjunto de datos original
region2 <- region2 %>%
left_join(prom_region2, by = c("season", "year")) %>%
select(-matches("(.x)$"))
region2<- region2 %>% select(-matches("(.y)$"))
region2<- region2 %>% select(-matches("(.y)$"))
summary1 <- region2 %>%
group_by(season, year, singing) %>%
summarise(num_unique_IDs = n_distinct(ID)) %>%
summarise(total_unique_signings = sum(num_unique_IDs))
plot4 <- ggplot(summary1, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
print(plot_4)
plot4 <- ggplot(summary1, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
region2 <- region2 %>%
mutate(season = case_when(
month %in% c(12, 1, 2,3) ~ 1,
month %in% c(4:11) ~ 2,
))
prom_region2 <- region2 %>%
group_by(season, year) %>%
summarise(
temperature= mean(temperature, na.rm = TRUE),
max_temp= mean(max_temp, na.rm = TRUE),
min_temp = mean(min_temp, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE)
)
# Combinar los promedios con el conjunto de datos original
region2 <- region2 %>%
left_join(prom_region2, by = c("season", "year")) %>%
select(-matches("(.x)$"))
region2<- region2 %>% select(-matches("(.y)$"))
summary2 <- region2 %>%
group_by(season, year, singing) %>%
summarise(num_unique_IDs = n_distinct(ID)) %>%
summarise(total_unique_signings = sum(num_unique_IDs))
plot4 <- ggplot(summary1, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
print(plot_4)
print(plot4)
print(plot4)
summary2 <- region2 %>%
group_by(season, year, singing) %>%
summarise(num_unique_IDs = n_distinct(ID)) %>%
summarise(total_unique_signings = sum(num_unique_IDs))
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
print(plot4)
library(ggplot2)
library(tidyverse)
print(plot4)
View(region2)
region2<- region2 %>% select(-matches("(.y)$")) %>% arrange(season)
summary2 <- region2 %>%
group_by(season, year, singing) %>%
summarise(num_unique_IDs = n_distinct(ID)) %>%
summarise(total_unique_signings = sum(num_unique_IDs))
View(summary2)
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
print(plot4)
plot4
plot(plot4)
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings)) +
geom_tile() +
scale_fill_distiller(palette = "YlOrRd", direction = 1) +
labs(title = "Number of Signings per Season-Year") +
theme_minimal()
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings))
plot(plot4)
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings))
print(plot4)
gc()
plot4 <- ggplot(summary2, aes(x = season, y = year, fill = total_unique_signings))
print(plot4)
barplot <- ggplot(datos, aes(x = year, y = total_unique_signings, fill = factor(season))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of Signings per Year", x = "Year", y = "Number of Signings", fill = "Season") +
theme_minimal()
barplot <- ggplot(summary2, aes(x = year, y = total_unique_signings, fill = factor(season))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of Signings per Year", x = "Year", y = "Number of Signings", fill = "Season") +
theme_minimal()
print(plot4)
# Termina el dispositivo de gráficos PDF
dev.off()
print(plot4)
